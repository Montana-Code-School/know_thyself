{"version":3,"sources":["navbar/Navbar.js","weather/Weather.js","time/time.js","profile/Profile.js","storage.js","login/login.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","variant","IconButton_default","color","aria-label","Menu_default","Typography_default","Weather","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","format","location","weather","temp","axios","get","then","result","loc","data","city","country","setState","main","catch","Date","getHours","toFixed","React","Component","Time","lib_default","ticking","timezone","styles","paper","height","display","justifyContent","textfield","width","Profile","fetch","blob","json","onDataLoad","nextProps","length","Math","floor","random","body","_this2","Navbar","time_time","weather_Weather","getRandomPrompt","Paper_default","style","TextField_default","onChange","e","entryContent","id","multiline","rowsMax","placeholder","fullWidth","margin","InputLabelProps","shrink","Button_default","onClick","submitEntry","disabled","Storage","globalInfo","token","user","isAuthenticated","tokenBlob","saveToken","localStorage","setItem","saveUser","getUser","getToken","getItem","Login","logout","onFailure","error","alert","googleResponse","response","Blob","JSON","stringify","access_token","accessToken","type","method","mode","cache","r","headers","checkingToken","content","Redirect","to","google_login","clientId","config","GOOGLE_CLIENT_ID","buttonText","onSuccess","App","value","entry","event","target","input","Content-type","Authorization","concat","res","console","log","BrowserRouter","Switch","Route","exact","path","component","render","profile_Profile","bind","handleSubmit","handleChange","Error","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c46e25e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -18,\n    marginRight: 10,\n  },\n};\n\nfunction NavBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Know Thyself\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nNavBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(NavBar);\n","import React, { Component }  from 'react';\nimport './weather.css'\nimport axios from 'axios'\n\nfunction getLocation() {\n  return axios.get(\"https://ipapi.co/json/\");\n}\n\nfunction getWeather(location) {\n\n  let units = \"&units=metric\";\n  let appid = \"&APPID=e8656d00ae56fd09428db5cae581be02\";\n\n  return axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + location + units + appid);\n}\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      format: 'C',\n      location: '',\n      weather: '',\n      temp: 0\n    };\n  }\n\n  componentDidMount() {\n    let _this = this;\n\n    getLocation().then(function(result) {\n        let loc = result.data.city + ', ' + result.data.country;\n\n        getWeather(loc).then(function(result) {\n\n          _this.setState({\n            location: loc,\n            weather: result.data.weather[0],\n            temp: result.data.main.temp\n          })\n\n        });\n    }).catch(\n\n      _this.setState({\n        location: 'Cannot get location.',\n        temp: null\n      })\n\n    );\n  }\n\n  // changeFormat(format) {\n  //\n  //   let temperature = 0;\n  //   let newFormat = '';\n  //\n  //   if (format === 'F') {\n  //     temperature = (this.state.temp * (9/5) + 32).toFixed(0);\n  //     newFormat = 'C';\n  //   } else {\n  //     temperature = ((this.state.temp - 32) * (5/9)).toFixed(0);\n  //     newFormat = 'F';\n  //   }\n  //\n  //   this.setState({\n  //     format: newFormat,\n  //     temp: temperature\n  //   });\n  // }\n\n  render() {\n    let hr = (new Date).getHours()\n    let tod = (hr >= 17) ? 'night' : 'day';\n\n    return (\n      <div className='container'>\n        <div className='location'>\n          <p >{this.state.location} - {this.state.weather.main} - {(this.state.temp * (9/5) + 32).toFixed(0)} &#176;</p>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Weather\n\nclass SwitchFormat extends React.Component {\n\n  handleChange(e) {\n    this.props.changeFormat(e.target.value);\n  }\n\n  render() {\n    return <button value={this.props.format} onClick={this.handleChange.bind(this)}>Change format</button>;\n  }\n}\n","import React, { Component }  from 'react';\nimport Clock from 'react-live-clock';\nimport './time.css'\n\n\nclass Time extends Component {\n  render() {\n    return (\n      <div>\n          <Clock className=\"time\" format={\"dddd, MMMM Do YYYY, h:mm a\"} ticking={true} timezone={'US/Mountain'} />\n      </div>\n    );\n  }\n}\n\nexport default Time;\n","import React, { Component } from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid';\nimport Navbar from '../navbar/Navbar'\nimport Weather from '../weather/Weather'\nimport Time from '../time/time'\nimport Button from '@material-ui/core/Button'\n\nconst styles = {\n\n  paper:{\n    height: '100%',\n    // width: 100,\n    // margin: 5,\n    // textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  textfield:{\n    height: '100%',\n    width: '75%'\n  }\n};\n\nclass Profile extends Component {\n  // gets list of prompts from backend\n  componentDidMount() {\n      fetch('http://localhost:4001/api/prompts')\n      .then(blob => blob.json())\n      .then(data => this.props.onDataLoad(data))\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.data.length) {\n      return false\n    } else\n      return true\n  }\n\n  // returns a random prompt in <paper> label on page load\n  getRandomPrompt() {\n    const {data} = this.props\n    if (!data.length) return \"loading\"\n    const randomIndex = Math.floor(Math.random() * data.length)\n    return data[randomIndex].body\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar position=\"sticky\"/>\n        <Time />\n        <Weather />\n        <h3>{this.getRandomPrompt()}</h3>\n        <Paper style={styles.paper}>\n          <TextField\n            onChange={(e) => this.props.entryContent(e)}\n            id=\"filled-full-width\"\n            multiline={true}\n            rowsMax={30}\n            style={styles.textfield}\n            placeholder=\"Put your words in me...\"\n            fullWidth\n            margin=\"normal\"\n            variant=\"standard\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </Paper>\n        <Button\n          onClick={(e) => this.props.submitEntry(e)}\n          disabled={false}\n          color=\"primary\">\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport default Profile\n","const Storage = (function(){\n  const globalInfo = {\n    token: '',\n    user: null,\n    isAuthenticated: false,\n    tokenBlob: true\n  }\n  return {\n    saveToken(token){\n      localStorage.setItem('token', token)\n      globalInfo.isAuthenticated = true;\n      globalInfo.token = token;\n    },\n    saveUser(user){\n      globalInfo.user = user\n    },\n    getUser(){\n      return globalInfo.user\n    },\n    getToken(){\n      if (globalInfo.token){\n        return globalInfo.token\n      } else {\n        return localStorage.getItem('token')\n      }\n    }\n  }\n})()\nexport default Storage\n","import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport config from '../config.json';\nimport Profile from '../profile/Profile';\nimport { Redirect } from 'react-router-dom';\nimport Storage from '../storage';\n\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      checkingToken: true,\n      isAuthenticated: false,\n      user: null,\n      token: ''\n     };\n  }\n  logout = () => {\n    this.setState({isAuthenticated: false, token: '', user: null})\n  }\n\n  onFailure = (error) => {\n    alert(error);\n  }\n  googleResponse = (response) => {\n    const tokenBlob = new Blob([JSON.stringify({access_token: response.accessToken}, null, 2)], {type : 'application/json'});\n    const options = {\n      method: 'POST',\n      body: tokenBlob,\n      mode: 'cors',\n      cache: 'default'\n    }\n    fetch('http://localhost:4001/api/v1/auth/google', options).then(r => {\n        const token = r.headers.get('x-auth-token');\n        r.json().then(user => {\n            if (token) {\n                this.setState({isAuthenticated: true, user, token})\n                Storage.saveToken(token)\n            }\n        });\n    })\n  }\n  // componentDidMount(){\n  //   const token = Storage.getToken()\n  // }\n\n\n  render() {\n    // if (this.state.checkingToken) return <div>loading</div>\n    let content = !!this.state.isAuthenticated ?\n      (\n        <Redirect to=\"/profile\" />\n      ) :\n      (\n        <div>\n          <GoogleLogin\n            clientId={config.GOOGLE_CLIENT_ID}\n            buttonText=\"Login\"\n            onSuccess={this.googleResponse}\n            onFailure={this.onFailure}\n            />\n        </div>\n      );\n    return (\n      <div className=\"App\">\n          {content}\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\nexport default Login\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './login/login'\nimport Profile from './profile/Profile'\nimport Storage from './storage'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: [],\n      value: '',\n      entry: ''\n    }\n  }\n\n  onDataLoad(data) {\n    this.setState({data})\n  }\n\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n  handleSubmit() {\n    if (Storage.getToken()) {\n      const input = {\n        body: this.state.value  \n      }\n      fetch('http://localhost:4001/verify/entry', {\n        method: 'POST',\n        headers: {\n          'Content-type' : 'application/json',\n          'Authorization': `bearer ${Storage.getToken()}`\n        },\n        body: JSON.stringify(input)\n      })\n      .then(res => res.json())\n      .then(data => console.log(data))\n    }\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/profile\" render={() => {\n            return <Profile onDataLoad={this.onDataLoad.bind(this)}\n                            submitEntry={this.handleSubmit.bind(this)}\n                            data={this.state.data}\n                            entryContent={this.handleChange.bind(this)}/>\n          }} />\n          <Route component={Error}/>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}